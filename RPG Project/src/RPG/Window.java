/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RPG;

import static RPG.Main.PLAYER;
import java.awt.Color;
import java.awt.Font;
import static java.awt.event.KeyEvent.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Gregory Salazar
 */
public class Window extends javax.swing.JFrame implements Runnable {

    private Thread thread;

    private boolean keyUp, keyDown, keyLeft, keyRight;
    private int lastKeyPressed, dir;

    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RPG Game");
        setBounds(new java.awt.Rectangle(0, 0, 800, 640));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 640));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowDeiconified(java.awt.event.WindowEvent evt) {
                formWindowDeiconified(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        //on mouse click
        start();
    }//GEN-LAST:event_formMouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        //on key pressed
        processKeyInput(evt.getKeyCode(), true);
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        //on key released
        processKeyInput(evt.getKeyCode(), false);
    }//GEN-LAST:event_formKeyReleased

    private void formWindowDeiconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeiconified
        //unpause the game when un-minimized
        World.unPause();
    }//GEN-LAST:event_formWindowDeiconified

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        //pause the game when minimized
        World.pause();
    }//GEN-LAST:event_formWindowIconified

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public synchronized void processKeyInput(int keyCode, boolean pressed) {
        lastKeyPressed = keyCode;
        switch (keyCode) {
            //player movement
            case VK_LEFT:
            case VK_A:  //left
                keyLeft = pressed;
                dir = (pressed ? Player.LEFT : dir);
                break;
            case VK_RIGHT:
            case VK_D:  //right
                keyRight = pressed;
                dir = (pressed ? Player.RIGHT : dir);
                break;
            case VK_UP:
            case VK_W:  //up
                keyUp = pressed;
                dir = (pressed ? Player.UP : dir);
                break;
            case VK_DOWN:
            case VK_S:  //down
                keyDown = pressed;
                dir = (pressed ? Player.DOWN : dir);
                break;
            case VK_SHIFT:  //run and walk
                PLAYER.setRunning(pressed);
                break;
            //other key functions
            default:
                return;
        }
        if (keyLeft == keyRight && keyUp == keyDown) {
            //keys are opposing, no movement or direction change
            PLAYER.setMoving(false);
        } else {
            //valid key cases
            int keysPressed = (keyLeft ? 1 : 0) + (keyRight ? 1 : 0) + (keyUp ? 1 : 0) + (keyDown ? 1 : 0);
            if (keysPressed == 1) {
                //1 key down
                if (keyLeft) {
                    dir = Player.LEFT;
                } else if (keyRight) {
                    dir = Player.RIGHT;
                } else if (keyUp) {
                    dir = Player.UP;
                } else {
                    dir = Player.DOWN;
                }
            } else if (keysPressed == 3) {
                //3 keys down
                if (keyLeft && keyRight) {
                    dir = (keyUp ? Player.UP : Player.DOWN);
                } else if (keyUp && keyDown) {
                    dir = (keyLeft ? Player.LEFT : Player.RIGHT);
                }
            }
            PLAYER.setFacingDirection(dir);
            PLAYER.setMoving(true);
        }
    }

    @Override
    public void run() {
        //constantly renders the screen image in accordance with FPS
        this.getGraphics().setColor(Color.BLACK);
        while (true) {
            synchronized (World.class) {
                this.getGraphics().drawImage(World.WORLD_IMAGE, 0, 0, null);
                this.getGraphics().drawString("FPS: " + Main.SCREEN_FPS, 50, 50);
            }
            try {
                Thread.sleep(1000 / Main.SCREEN_FPS);
            } catch (InterruptedException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void start() {
        if (thread == null) {
            thread = new Thread(this, "Screen Rendering");
            thread.setPriority(Thread.MAX_PRIORITY);
            thread.start();
        }
    }
}
